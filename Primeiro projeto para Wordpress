// PARTE DO CÓDIGO Java Script
jQuery(document).ready(function($) {
    if (window.location.href === "http://localhost/plataforma/") {
        var revisaoContainer = document.querySelector('.revisao-container');
        if (revisaoContainer) {
            revisaoContainer.style.display = 'none';
        }

        var ajaxurl = myPluginData.ajaxurl;
        var debounceTimeout, botaoClicado = false, intervaloPermitido = 1000, tentativasRevisar = 0, limiteTentativas = 10;

        var filtros = JSON.parse(localStorage.getItem("plataformaFiltroPersonalizado") || "{}");

    // Ordena as chaves dos filtros em ordem alfabética
        var filtrosOrdenados = Object.keys(filtros).sort();

    // Eventos para salvar filtros
        $("#filtro-correta, #filtro-errada, #filtro-nao-respondida, input[name='ordenacao'], input[name='filtro-disciplina[]'], input[name='filtro-assunto[]'], input[name='filtro-banca[]'], input[name='filtro-ano[]'], input[name='filtro-forma[]'], input[name='filtro-modalidade[]']").on("change", function() {
            salvarFiltros();
        });

    // Evento específico para os filtros personalizados
        $('body').on('change', "input[name='filtro-personalizado[]']", function() {
            salvarFiltros(); 
        });

        // Evento para limpar filtros
        $('#botao-limpar-filtro').on('click', function() {
            // Limpa checkboxes e radios
            $(".filtro-container input[type='checkbox'], .filtro-container input[type='radio']").prop('checked', false);
            // Muda a cor do contador de IDs para cinza
            $(".contador-ids").css('color', 'gray');
            // Desabilita revisão espaçada
            $("input[name='revisao-espacada']").prop('disabled', true).closest('label').css('color', 'gray');
            // Esvazia os filtros no localStorage mantendo a chave
            localStorage.setItem("plataformaFiltrosSelecionados", "{}");
            // Atualiza a seleção em todos os containers de conteúdo
            document.querySelectorAll('.content-container, .content-container-assunto').forEach(checkSelectAllCheckbox);
        });


    // Adicionar manipulação para 'Selecionar todas' e 'Deselecionar todas'
        $('input[data-selecionar-todas="true"]').on('change', function() {
            var isChecked = $(this).is(':checked');
            var allCheckboxes = $(this).closest('.content-container, .content-container-assunto').find('input[type="checkbox"]:not([data-selecionar-todas="true"])');

            allCheckboxes.each(function() {
                $(this).prop('checked', isChecked);
            });

            salvarFiltros(); 
        });

        function iniciarMathJax() {
            window.MathJax = {
              tex: {
                inlineMath: [[' $ ', ' $ '], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']],
                processEscapes: true,
                tags: 'ams'
            },
            options: {
              ignoreHtmlClass: 'tex2jax_ignore|dno'
          },
          startup: {
              ready: () => {
                MathJax.startup.defaultReady();
                MathJax.startup.promise.then(() => {
                    console.log('MathJax typesetting complete.');
                }).catch(error => {
                    console.error('Error with MathJax initial typesetting:', error);
                });
            }
        }
    };

    // Carregando o script do MathJax se ainda não foi carregado
    if (!document.querySelector('script[src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"]')) {
        var script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
        script.async = true;
        document.head.appendChild(script);
    }
}

function verificarVisibilidadeInstagramFollow() {
    var preparandoQuestoesVisivel = $('#carregando-questoes').is(':visible');
    var mensagemErroVisivel = $('#mensagem-erro').is(':visible');

    if (preparandoQuestoesVisivel || mensagemErroVisivel) {
        $('#instagram-follow').hide();
    } else {
        $('#instagram-follow').show();
    }
}

function verificarEAtualizarSelecionarTodas() {
    document.querySelectorAll('.content-container').forEach(container => {
        const checkboxes = container.querySelectorAll('input[type="checkbox"]:not([data-selecionar-todas="true"])');
        const selecionarTodasCheckbox = container.querySelector('input[type="checkbox"][data-selecionar-todas="true"]');
        if (checkboxes.length === 0) {
            if (selecionarTodasCheckbox) selecionarTodasCheckbox.parentElement.style.display = 'none';
        } else {
            if (selecionarTodasCheckbox) selecionarTodasCheckbox.parentElement.style.display = '';
        }
    });
}

    // Função para verificar e desabilitar os botões de rádio de revisão espaçada
function aplicarRegrasRevisaoEspacada() {
    var filtrosSalvos = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionados"));

    // Verifica se há filtros salvos e se cumprem as condições para desabilitar
    if (filtrosSalvos) {
        var correta = filtrosSalvos.RespondidaCorreta;
        var errada = filtrosSalvos.RespondidaErrada;
        var naoRespondida = filtrosSalvos.NaoRespondida;

        // Condições para desabilitar os botões de rádio
        var shouldDisable = (correta && errada && naoRespondida) ||
        (correta && !errada && naoRespondida) ||
        (!correta && errada && naoRespondida) ||
        (!correta && !errada && naoRespondida) ||
        (!correta && !errada && !naoRespondida);

        $("input[name='revisao-espacada']").prop('disabled', shouldDisable).closest('label').css('color', shouldDisable ? 'gray' : '');
        $("input[name='revisao-espacada']").prop('checked', false); // Desmarca os botões de rádio

        // Atualizar visualmente os contadores baseado no estado dos botões
        $(".contador-ids").css('color', shouldDisable ? 'gray' : '');
    } else {
        // Se não houver filtros salvos, desabilita e desmarca os rádios de revisão espaçada
        $("input[name='revisao-espacada']").prop('disabled', true).closest('label').css('color', 'gray');
        $("input[name='revisao-espacada']").prop('checked', false); // Desmarca os botões de rádio
        $(".contador-ids").css('color', 'gray');
    }
}


// Declaração de variável global
var idsValidosGlobal = [];

function mostrarQuestoesRevisadas() {
    var plataformaTentativas = JSON.parse(localStorage.getItem("plataformaTentativas") || "[]");
    var filtros = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionados") || "{}");
    var diasSelecionados = parseInt($("input[name='revisao-espacada']:checked").val());

    if (isNaN(diasSelecionados)) {
        console.log("Nenhum filtro de revisão espaçada selecionado.");
        $(".contador-ids").text(""); // Limpa o contador se nenhum filtro estiver selecionado
        return;
    }

    var dataAtual = new Date();
    dataAtual.setHours(0, 0, 0, 0); // Zera a hora para a comparação de data
    var dataLimite = new Date(dataAtual);
    dataLimite.setDate(dataLimite.getDate() - diasSelecionados);

    var tentativasAgrupadas = {};
    plataformaTentativas.forEach(function(tentativa) {
        var dataTentativa = new Date(tentativa.h);
        // Verifica se a tentativa atual é mais recente do que a já armazenada
        if (!tentativasAgrupadas[tentativa.id] || new Date(tentativasAgrupadas[tentativa.id].h) < dataTentativa) {
            tentativasAgrupadas[tentativa.id] = tentativa;
        }
    });

    var questoesValidas = Object.values(tentativasAgrupadas).filter(function(tentativa) {
        var dataTentativa = new Date(tentativa.h);
        dataTentativa.setHours(0, 0, 0, 0); // Considera apenas a data, ignorando a hora
        var isWithinDate = dataTentativa <= dataLimite;
        var isRespondidaCorreta = filtros.RespondidaCorreta && tentativa.r === 'c';
        var isRespondidaErrada = filtros.RespondidaErrada && tentativa.r === 'e';
        return isWithinDate && (isRespondidaCorreta || isRespondidaErrada);
    });

    idsValidosGlobal = questoesValidas.map(tentativa => tentativa.id);

    $(".contador-ids").text("(" + idsValidosGlobal.length + ")");

    console.log("IDs dos formulários válidos:", idsValidosGlobal);
    console.log("Questões revisadas até " + dataLimite.toDateString() + " e antes:");
    questoesValidas.forEach(function(tentativa) {
        console.log("ID da Questão: " + tentativa.id + ", Data da Tentativa: " + tentativa.h);
    });

    if (questoesValidas.length === 0) {
        console.log("Nenhuma questão revisada encontrada para o intervalo selecionado.");
    }

    localStorage.setItem("plataformaRevisaoEspacada", JSON.stringify(idsValidosGlobal));
}

$(document).ready(function() {
    if ($("input[name='revisao-espacada']:checked").length) {
        mostrarQuestoesRevisadas();
    }
    $("input[name='revisao-espacada']").on("change", mostrarQuestoesRevisadas);
});

function atualizarContadoresRevisaoEspacada() {
    var plataformaTentativas = JSON.parse(localStorage.getItem("plataformaTentativas") || "[]");
    var filtros = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionados") || "{}");
    var dataAtual = new Date();
    dataAtual.setHours(0, 0, 0, 0);

    // Agrupar as tentativas por ID mantendo apenas a mais recente
    var tentativasAgrupadas = {};
    plataformaTentativas.forEach(function(tentativa) {
        var dataTentativa = new Date(tentativa.h);
        if (!tentativasAgrupadas[tentativa.id] || new Date(tentativasAgrupadas[tentativa.id].h) < dataTentativa) {
            tentativasAgrupadas[tentativa.id] = tentativa;
        }
    });

    // Para cada contador de revisão espaçada
    $(".contador-ids").each(function() {
        var dias = parseInt($(this).data("dias"));
        var dataLimite = new Date(dataAtual);
        dataLimite.setDate(dataLimite.getDate() - dias);

        var questoesValidas = Object.values(tentativasAgrupadas).filter(tentativa => {
            var dataTentativa = new Date(tentativa.h);
        dataTentativa.setHours(0, 0, 0, 0); // Igualar horas para comparar apenas dias
        return dataTentativa <= dataLimite &&
        ((filtros.RespondidaCorreta && tentativa.r === 'c') ||
            (filtros.RespondidaErrada && tentativa.r === 'e'));
    });

    // Atualiza o contador baseado no estado do botão de revisão espaçada
        var isDisabled = $("input[name='revisao-espacada']").prop('disabled');
        $(this).text("(" + questoesValidas.length + ")");
    $(this).css('color', isDisabled ? 'gray' : ''); // Desabilita visualmente se necessário
});
}

// Inicialização e ouvintes de eventos
$(document).ready(function() {
    $("input[name='revisao-espacada'], #filtro-correta, #filtro-errada").on("change", function() {
        atualizarContadoresRevisaoEspacada();
    });
    atualizarContadoresRevisaoEspacada(); // Chama na inicialização para atualizar contadores
});


function verificarFiltrosSelecionados() {
    // Recupera os filtros do localStorage
    var filtrosSelecionados = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionados") || "{}");

    // Verifica se os filtros de resposta estão ativos
    var naoRespondida = filtrosSelecionados.NaoRespondida || false;
    var respondidaCorreta = filtrosSelecionados.RespondidaCorreta || false;
    var respondidaErrada = filtrosSelecionados.RespondidaErrada || false;


    var plataformaTentativas = JSON.parse(localStorage.getItem("plataformaTentativas") || "[]");
    var tentativasAgrupadas = {};
    var idsCorretas = [];
    var idsErradas = [];
    var idsNaoRespondida = []; // Array sempre vazio
    var idsGeral = [];

    plataformaTentativas.forEach(function(tentativa) {
        if (!tentativasAgrupadas[tentativa.id] || new Date(tentativasAgrupadas[tentativa.id].h) < new Date(tentativa.h)) {
            tentativasAgrupadas[tentativa.id] = tentativa;
        }
    });

    for (var id in tentativasAgrupadas) {
        var tentativa = tentativasAgrupadas[id];
        if (tentativa.r === 'c') {
            idsCorretas.push(id);
        } else if (tentativa.r === 'e') {
            idsErradas.push(id);
        }
    }

    // Adicionando ao idsGeral conforme os filtros ativos
    if (respondidaCorreta) {
        idsGeral = idsGeral.concat(idsCorretas);
    }
    if (respondidaErrada) {
        idsGeral = idsGeral.concat(idsErradas);
    }
    if (naoRespondida) {
        idsGeral = idsGeral.concat(idsNaoRespondida);
    }

    // Salva idsGeral no localStorage
    localStorage.setItem("plataformaDisciplinaAssuntoNumero", JSON.stringify(idsGeral));
}

function contarPlataformaDisciplinaAssuntoNumero() {
    var filtrosSelecionados = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionados") || "{}");

    // Verifica se os filtros de resposta estão ativos
    var naoRespondida = filtrosSelecionados.NaoRespondida || false;
    var respondidaCorreta = filtrosSelecionados.RespondidaCorreta || false;
    var respondidaErrada = filtrosSelecionados.RespondidaErrada || false;

    // Recupera o valor de plataformaDisciplinaAssuntoNumero do localStorage
    var idsGeral = JSON.parse(localStorage.getItem("plataformaDisciplinaAssuntoNumero") || "[]");

    // console.log("Conteúdo de plataformaDisciplinaAssuntoNumero:", idsGeral);  //****************************************************

    // Contagem de assuntos e disciplinas ~ para quando nenhuma estiver selecionada
    jQuery.post(myPluginData.ajaxurl, {
        action: 'acessar_tabela_questoes',  // Ação PHP que será chamada no servidor
        ids: idsGeral  // Envia o array de IDs para o servidor
    }, function(response) {
       // console.log("Dados recebidos do servidor:", response);  //******************************************************************
        if (response && Array.isArray(response)) {
            var disciplinas = {}; // Objeto para armazenar contagens de disciplinas e assuntos
            response.forEach(function(questao) {
                if (!disciplinas[questao.disciplina]) {
                    disciplinas[questao.disciplina] = { total: 0, assuntos: {} };
                }
                disciplinas[questao.disciplina].total += 1;

                if (!disciplinas[questao.disciplina].assuntos[questao.assunto]) {
                    disciplinas[questao.disciplina].assuntos[questao.assunto] = 0;
                }
                disciplinas[questao.disciplina].assuntos[questao.assunto] += 1;
            });
            // Log das disciplinas e assuntos com contagens
            Object.keys(disciplinas).forEach(function(disciplina) {
                console.log(disciplina + " (" + disciplinas[disciplina].total + ")");
                Object.keys(disciplinas[disciplina].assuntos).forEach(function(assunto) {
                    console.log("  " + assunto + " (" + disciplinas[disciplina].assuntos[assunto] + ")");
                });
            });
        } else {
            console.log("Nenhuma questão encontrada para os IDs fornecidos.");
        }
    }).fail(function(error) {
        console.error("Erro na requisição AJAX:", error);
    });
}

contarPlataformaDisciplinaAssuntoNumero()

// Criar elementos de filtro personalizado e adicioná-los ao DOM
filtrosOrdenados.forEach(function(nomeFiltro) {
    var classeAdicional = '';
    var conteudoFiltro = nomeFiltro;
    if (/^(\w)\1+$/.test(nomeFiltro) || /[\.\-\)]/.test(nomeFiltro)) {
        classeAdicional = ' break-all';
        // Adiciona um hífen 'soft' após um intervalo regular, evitando o início e após caracteres especiais
        conteudoFiltro = nomeFiltro.replace(/(?<=\w{5})\w{5}/g, '\u00AD$&');
    }
    var opcaoHtml = '<label class="filtro-personalizado-label' + classeAdicional + '" lang="pt-BR"><input type="checkbox" name="filtro-personalizado[]" value="' + nomeFiltro + '"><span>' + conteudoFiltro + '</span></label><br>';
    $('#filtro-personalizado-container').append(opcaoHtml);
});


// Funções para salvar e carregar filtros
function salvarFiltros() {
    var filtros = {
        RespondidaCorreta: $("#filtro-correta").is(":checked"),
        RespondidaErrada: $("#filtro-errada").is(":checked"),
        NaoRespondida: $("#filtro-nao-respondida").is(":checked"),
        Ordenacao: $("input[name='ordenacao']:checked").val(),
        RevisaoEspacada: $("input[name='revisao-espacada']:checked").val(),
        Disciplina: $("input[name='filtro-disciplina[]']:checked").map(function() { return $(this).val(); }).get(),
        Assunto: $("input[name='filtro-assunto[]']:checked").map(function() { return $(this).val(); }).get(),
        Banca: $("input[name='filtro-banca[]']:checked").map(function() { return $(this).val(); }).get(),
        Ano: $("input[name='filtro-ano[]']:checked").map(function() { return $(this).val(); }).get(),
        Forma: $("input[name='filtro-forma[]']:checked").map(function() { return $(this).val(); }).get(),
        Modalidade: $("input[name='filtro-modalidade[]']:checked").map(function() { return $(this).val(); }).get(),
        Personalizado: $("input[name='filtro-personalizado[]']:checked").map(function() { return $(this).val(); }).get()
    };
    localStorage.setItem("plataformaFiltrosSelecionados", JSON.stringify(filtros));
    aplicarRegrasRevisaoEspacada();
    verificarFiltrosSelecionados();
    contarPlataformaDisciplinaAssuntoNumero()
}

// Função para carregar filtros salvos
function carregarFiltrosSalvos() {
    var filtrosSalvos = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionados"));
    if (filtrosSalvos) {
        $("#filtro-correta").prop("checked", filtrosSalvos.RespondidaCorreta);
        $("#filtro-errada").prop("checked", filtrosSalvos.RespondidaErrada);
        $("#filtro-nao-respondida").prop("checked", filtrosSalvos.NaoRespondida);
        $("input[name='ordenacao'][value='" + filtrosSalvos.Ordenacao + "']").prop("checked", true);
        $("input[name='revisao-espacada'][value='" + filtrosSalvos.RevisaoEspacada + "']").prop("checked", true);

        setCheckedValues("filtro-disciplina[]", filtrosSalvos.Disciplina);
        setCheckedValues("filtro-assunto[]", filtrosSalvos.Assunto);
        setCheckedValues("filtro-banca[]", filtrosSalvos.Banca);
        setCheckedValues("filtro-ano[]", filtrosSalvos.Ano);
        setCheckedValues("filtro-forma[]", filtrosSalvos.Forma);
        setCheckedValues("filtro-modalidade[]", filtrosSalvos.Modalidade);
        setCheckedValues("filtro-personalizado[]", filtrosSalvos.Personalizado);
    }
}

// Função para obter o estado atual das checkboxes personalizadas
function obterEstadoCheckboxesPersonalizado() {
    var estadoCheckboxes = [];
    $("input[name='filtro-personalizado[]']:checked").each(function() {
        estadoCheckboxes.push($(this).val());
    });
    return estadoCheckboxes;
}

/////

const janelaModalFiltrosSelecionados = `
<div id="janela-modal-salvar-filtros-selecionados" class="janela-modal">
<button id="fechar-janela-modal" class="fechar-janela-modal" aria-label="Fechar">X</button>
<h3 class="titulo-janela-modal">Filtros selecionados salvos:</h3>
<div id="container-salvar-filtros-selecionados" class="container-janela-modal">
<ul id="lista-itens-salvar-filtros-selecionados" class="lista-itens-janela-modal"></ul>
</div>
<div class="texto-botao-janela-modal"><br>Adicione ao filtro personalizado:</div>
<input type="text" id="input-rotulo-salvar-filtros-selecionados" class="input-rotulo-janela-modal" placeholder="Digite um rótulo..." maxlength="80">
<button id="botao-adicionar-salvar-filtros-selecionados" class="botao-adicionar-janela-modal">Adicionar</button>
</div>`;

// Adiciona o modal ao DOM
$('body').append($(janelaModalFiltrosSelecionados));

// Função para salvar filtros com identificador único
function salvarFiltrosSelecionados() {
    const listaId = $('#input-rotulo-salvar-filtros-selecionados').val().trim(); // Obter identificador da lista do input
    if (!listaId) {
        return;
    }

    const filtros = {
        RespondidaCorreta: $("#filtro-correta").is(":checked"),
        RespondidaErrada: $("#filtro-errada").is(":checked"),
        NaoRespondida: $("#filtro-nao-respondida").is(":checked"),
        Ordenacao: $("input[name='ordenacao']:checked").val(),
        revisaoEspacada: $("input[name='revisao-espacada']:checked").val(),
        Disciplina: getCheckedValues("filtro-disciplina[]"),
        Assunto: getCheckedValues("filtro-assunto[]"),
        Banca: getCheckedValues("filtro-banca[]"),
        Ano: getCheckedValues("filtro-ano[]"),
        Forma: getCheckedValues("filtro-forma[]"),
        Modalidade: getCheckedValues("filtro-modalidade[]"),
        Personalizado: getCheckedValues("filtro-personalizado[]")
    };

    let listasSalvas = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionadosSalvos") || "{}");
    listasSalvas[listaId] = filtros; // Salva ou atualiza a lista pelo identificador
    localStorage.setItem("plataformaFiltrosSelecionadosSalvos", JSON.stringify(listasSalvas));
    exibirJanelaModalFiltrosSelecionados();

    $('#janela-modal-salvar-filtros-selecionados').removeClass('open');
    $('#input-rotulo-salvar-filtros-selecionados').val('');
}

// Função para exibir todas as listas de filtros salvos
function exibirJanelaModalFiltrosSelecionados() {
    const listasSalvas = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionadosSalvos") || "{}");
    let html = '';
    Object.keys(listasSalvas).forEach(listaId => {
        html += `<li class="lista-salva-item" data-lista-id="${listaId}">
        ${listaId}&nbsp;
        <span class="button-group">
        <button class="botao-selecionar-item-container-salvar-filtros-selecionados" data-lista-id="${listaId}">selecionar</button>
        <button class="botao-excluir-item-container-salvar-filtros-selecionados" data-lista-id="${listaId}">excluir</button>
        <span class="fill-space"></span>
        </span>
        </li>`; 
    });
    $('#lista-itens-salvar-filtros-selecionados').html(html);
}


// Adiciona o evento de clique para o botão de selecionar
$(document).on('click', '.botao-selecionar-item-container-salvar-filtros-selecionados', function() {
    event.stopPropagation(); 
    const listaId = $(this).data('lista-id');
    carregarFiltrosSelecionadosSalvos(listaId);
    fecharJanelaModal(); // Esconde a janela modal
    document.querySelectorAll('.content-container, .content-container-assunto').forEach(checkSelectAllCheckbox);
    aplicarRegrasRevisaoEspacada()
});


function getCheckedValues(filterName) {
    return $(`input[name='${filterName}']:checked`).map(function() { return $(this).val(); }).get();
}

// Função para carregar e aplicar os filtros salvos
function carregarFiltrosSelecionadosSalvos(listaId) {
    $('#botao-limpar-filtro').click(); // Limpa todos os filtros antes de aplicar os novos

    var filtrosSalvos = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionadosSalvos") || "{}");
    var filtros = filtrosSalvos[listaId];

    if (filtros) {
        // Aplica os filtros às checkboxes e radios
        $("#filtro-correta").prop("checked", filtros.RespondidaCorreta);
        $("#filtro-errada").prop("checked", filtros.RespondidaErrada);
        $("#filtro-nao-respondida").prop("checked", filtros.NaoRespondida);
        $("input[name='ordenacao'][value='" + filtros.Ordenacao + "']").prop("checked", true);
        $("input[name='revisao-espacada'][value='" + filtros.revisaoEspacada + "']").prop("checked", true);

        setCheckedValues("filtro-disciplina[]", filtros.Disciplina);
        setCheckedValues("filtro-assunto[]", filtros.Assunto);
        setCheckedValues("filtro-banca[]", filtros.Banca);
        setCheckedValues("filtro-ano[]", filtros.Ano);
        setCheckedValues("filtro-forma[]", filtros.Forma);
        setCheckedValues("filtro-modalidade[]", filtros.Modalidade);
        setCheckedValues("filtro-personalizado[]", filtros.Personalizado);

        // Salva os filtros como o estado atual da página
        localStorage.setItem("plataformaFiltrosSelecionados", JSON.stringify(filtros));
    }
}

// Função para definir os valores marcados com base nos filtros carregados
function setCheckedValues(filterName, values) {
    // Primeiro, desmarcar todos os checkboxes ou radios
    $("input[name='" + filterName + "']").prop('checked', false);

    // Depois, marcar apenas os que estão na lista de valores salvos
    values.forEach(function(value) {
        $("input[name='" + filterName + "'][value='" + value + "']").prop('checked', true);
    });
}

function excluirFiltroSelecionado(listaId) {
    let filtrosSalvos = JSON.parse(localStorage.getItem("plataformaFiltrosSelecionadosSalvos") || "{}");
    delete filtrosSalvos[listaId]; // Remove o filtro do objeto
    localStorage.setItem("plataformaFiltrosSelecionadosSalvos", JSON.stringify(filtrosSalvos)); // Atualiza o localStorage
    exibirJanelaModalFiltrosSelecionados(); // Atualiza a lista exibida
}

$(document).on('click', '.botao-excluir-item-container-salvar-filtros-selecionados', function() {
    var listaId = $(this).data('lista-id');
    var elemento = $(this).parent();

    // Fecha todas as confirmações abertas
    $('.excluir-item-container').each(function() {
        var idAtual = $(this).find('.confirmar-excluir-item-container-salvar-filtros-selecionados').data('lista-id');
        $(this).parent().html(`
            <button class="botao-selecionar-item-container-salvar-filtros-selecionados" data-lista-id="${idAtual}">selecionar</button>
            <button class="botao-excluir-item-container-salvar-filtros-selecionados" data-lista-id="${idAtual}">excluir</button>
            `);
    });

    // Adiciona a mensagem de confirmação apenas para o item selecionado
    elemento.html(`
        <div class="excluir-item-container">
        ⮑Você quer excluir o item acima?⚠️
        <div>
        <button class="confirmar-excluir-item-container-salvar-filtros-selecionados" data-lista-id="${listaId}">SIM</button>
        <button class="cancelar-excluir-item-container-salvar-filtros-selecionados">NÃO</button>
        </div>
        </div>
        `);
});

// Manipulador de eventos para o botão 'Sim' de confirmação de exclusão
$(document).on('click', '.confirmar-excluir-item-container-salvar-filtros-selecionados', function() {
    var listaId = $(this).data('lista-id');
    excluirFiltroSelecionado(listaId);
    // Após a exclusão, poderia recarregar ou atualizar a lista para mostrar as alterações
    exibirJanelaModalFiltrosSelecionados();
});

// Manipulador de eventos para o botão 'Não' que cancela a exclusão
$(document).on('click', '.cancelar-excluir-item-container-salvar-filtros-selecionados', function() {
    exibirJanelaModalFiltrosSelecionados(); // Recarrega a lista para restaurar a visualização original
});

// Previne a propagação do clique dos botões dentro do item da lista
$(document).on('click', '.botao-excluir-item-container-salvar-filtros-selecionados, .confirmar-excluir-item-container-salvar-filtros-selecionados, .cancelar-excluir-item-container-salvar-filtros-selecionados', function(e) {
    e.stopPropagation(); // Impede que o evento de clique se propague para o item da lista
});


/////

var janelaModalPersonalizado = `
<div id="janela-modal-personalizado" class="janela-modal">
<button id="fechar-janela-modal" class="fechar-janela-modal">X</button>
<h3 class="titulo-janela-modal">Filtros da questão:</h3>
<div id="container-personalizado" class="container-janela-modal">
<ul id="lista-itens-personalzados" class="lista-itens-janela-modal"></ul>
</div>
<div class="texto-botao-janela-modal"><br>Adicione ao filtro personalizado:</div>
<input type="text" id="input-rotulo-personalizado" class="input-rotulo-janela-modal" placeholder="Digite um rótulo..." maxlength="50">
<button id="botao-adicionar-personalizado" class="botao-adicionar-janela-modal">Adicionar</button>
</div>`;


$('body').append(janelaModalPersonalizado);

//Janela do botão de informações
var janelaModalInformacoes = `
<div id="janela-modal-informacoes" class="janela-modal">
<button id="fechar-janela-modal" class="fechar-janela-modal">X</button>
<h3 class="titulo-janela-modal">Informações Detalhadas:</h3>
<div id="container-informacoes" class="container-janela-modal">
<ul id="janela-informacoes" class="lista-itens-janela-modal"></ul>
</div>
</div>`;

$('body').append(janelaModalInformacoes);


// Criação do overlay
var overlay = $('<div id="modal-overlay"></div>');
$('body').append(overlay);

// Função para exibir/ocultar a janela de filtro e o overlay com efeito de esmaecimento
function exibirJanelaModalPersonalizado(questaoId) {
    var isOpen = $('#janela-modal-personalizado').is(':visible');

    if (!isOpen) {
        exibirItensPersonalizados(questaoId);
        $('#janela-modal-personalizado').fadeIn(); // Aplica fadeIn para mostrar a janela com efeito de esmaecimento
    } else {
        $('#janela-modal-personalizado').fadeOut(); // Aplica fadeOut para ocultar a janela com efeito de esmaecimento
    }
}

// Função para fechar o modal e o overlay
function fecharJanelaModal() {
    $('#janela-modal-personalizado, #janela-modal-informacoes, #janela-modal-salvar-filtros-selecionados').fadeOut(); 
    $('#modal-overlay').fadeOut();
}

// Manipulador de eventos para os botões 'X' para fechar modais
$(document).on('click', '#fechar-janela-modal', function() {
    fecharJanelaModal();
});

// Manipulação de eventos com melhorias
$('#botao-filtros-selecionados').on('click', () => {
    $('#janela-modal-salvar-filtros-selecionados').fadeIn();
    $('#modal-overlay').fadeIn();
    exibirJanelaModalFiltrosSelecionados();
});

$('#botao-adicionar-salvar-filtros-selecionados').on('click', salvarFiltrosSelecionados);

var tempoInicial;
var atualizarCronometro;
var tempoInicialFormatado;
var cronometrosQuestoes = {};
    var contadorParadasPermanentemente = 0;  // Contador global para paradas permanentes do cronômetro
    var tempoDecorridoPrincipal = 0;  // Variável para armazenar o tempo decorrido total do cronômetro principal

    function getBrasiliaTimeFormatado(date = new Date()) {
    // Captura a data atual para comparação
        var now = new Date();
        var utcNow = now.getTime() + now.getTimezoneOffset() * 60000;
        var today = new Date(utcNow - (3 * 60 * 60 * 1000));  

    // Convertendo para UTC
        var utc = date.getTime() + date.getTimezoneOffset() * 60000;
        var brasiliaTime = new Date(utc - (3 * 60 * 60 * 1000));

    // Formatação para garantir dois dígitos nos componentes da hora
        var hours = ('0' + brasiliaTime.getHours()).slice(-2);
        var minutes = ('0' + brasiliaTime.getMinutes()).slice(-2);

    // Determinar se a data é "hoje" ou "ontem"
        var day = ('0' + brasiliaTime.getDate()).slice(-2);
        var month = ('0' + (brasiliaTime.getMonth() + 1)).slice(-2);
        var year = brasiliaTime.getFullYear().toString().slice(-2); 

        var formattedDate;
        if (brasiliaTime.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0)) {
            formattedDate = 'hoje';
        } else if (new Date(today.setDate(today.getDate() - 1)).setHours(0, 0, 0, 0) === brasiliaTime.setHours(0, 0, 0, 0)) {
            formattedDate = 'ontem';
        } else {
            formattedDate = `${day}/${month}/${year}`;
        }

        return `${hours}h${minutes} de ${formattedDate}`;
    }

// Função para formatar o tempo decorrido em uma string legível
    function formatarTempoDecorrido(tempoDecorrido) {
        var tempo = new Date(tempoDecorrido);
        var horas = tempo.getUTCHours();
        var minutos = tempo.getUTCMinutes();
        var segundos = tempo.getUTCSeconds();
        var tempoFormatado = (horas > 0 ? horas + 'h ' : '') + (minutos > 0 ? minutos + 'm ' : '') + segundos + 's';
        return tempoFormatado;
    }

    function formatarTempoDecorridoFormulario(tempoDecorrido) {
        let segundos = Math.floor((tempoDecorrido / 1000) % 60);
        let minutos = Math.floor((tempoDecorrido / (1000 * 60)) % 60);
        let horas = Math.floor((tempoDecorrido / (1000 * 60 * 60)) % 24);

        horas = (horas < 10) ? "0" + horas : horas;
        minutos = (minutos < 10) ? "0" + minutos : minutos;
        segundos = (segundos < 10) ? "0" + segundos : segundos;

        return horas + ":" + minutos + ":" + segundos;
    }

    function contarQuestoesCronometro() {
        var totalQuestoes = $('.questao-container').length;
        console.log("Total de questões: " + totalQuestoes);

        // Verifica se o número de questões é maior que zero e se todos os cronômetros das questões foram parados permanentemente
        if (totalQuestoes > 0 && contadorParadasPermanentemente >= totalQuestoes) {
            pararCronometroPermanentemente(); // Parar cronômetros somente se houver questões e todos os cronômetros estiverem parados
        }
    }

    function iniciarCronometro() {
        tempoInicialFormatado = getBrasiliaTimeFormatado(tempoInicial); 
        tempoInicial = new Date();

        tempoInicialFormatado = getBrasiliaTimeFormatado(tempoInicial); 
        $('#tempoInicial').text(tempoInicialFormatado); 

        if (atualizarCronometro) clearInterval(atualizarCronometro); 

        atualizarCronometro = setInterval(function() {
            var agora = new Date();
            tempoDecorridoPrincipal = new Date(agora - tempoInicial);
            var tempoFormatado = formatarTempoDecorrido(tempoDecorridoPrincipal);

            $('#tempoDecorrido').text(tempoFormatado); 
        }, 500);
    }

    function pararCronometroPrincipal() {
        if (atualizarCronometro) {
            clearInterval(atualizarCronometro);
            atualizarCronometro = null;
            console.log("Cronômetro principal parado permanentemente.");

        // Continuar atualizando o display do cronômetro principal
            setInterval(function() {
                var tempoFormatado = formatarTempoDecorrido(tempoDecorridoPrincipal);
                $('#tempoDecorrido').text(tempoFormatado);
            }, 500);
        }
    }

    function iniciarCronometroQuestao(idQuestao) {
        var questao = cronometrosQuestoes[idQuestao];
        if (!questao) {
            console.log("Criando novo cronômetro para a questão:", idQuestao);
            questao = cronometrosQuestoes[idQuestao] = {
                tempoInicial: new Date(),
                tempoDecorrido: 0,
                cronometro: null,
                finalizado: false,
                paradoPermanentemente: false
            };
        } else if (!questao.finalizado) {
            console.log("Cronômetro existente encontrado para a questão:", idQuestao);
            questao.tempoInicial = new Date() - questao.tempoDecorrido;
        } else {
            console.log("A questão", idQuestao, "foi finalizada e não pode ter o cronômetro reiniciado.");
            return;
        }

        questao.cronometro = setInterval(function() {
            if (!questao.paradoPermanentemente) {
                questao.tempoDecorrido = new Date() - questao.tempoInicial;
            }
            var tempoFormatado = formatarTempoDecorrido(questao.tempoDecorrido);
            $('#tempoIndividual').text(tempoFormatado);
            console.log("Cronômetro atualizado para a questão:", idQuestao, "Tempo:", tempoFormatado);
        }, 500);
    }

    function pararCronometroPermanentementeQuestao(idQuestao) {
        var questao = cronometrosQuestoes[idQuestao];
        if (questao && questao.cronometro) {
            console.log("Parando permanentemente o cronômetro para a questão:", idQuestao);
        questao.paradoPermanentemente = true;  // Define que o cronômetro está parado permanentemente
        var tempoFinalizado = formatarTempoDecorrido(questao.tempoDecorrido);
        console.log("Tempo finalizado:", tempoFinalizado);
        contadorParadasPermanentemente++;  // Incrementa o contador
        console.log("Cronômetros parados permanentemente: " + contadorParadasPermanentemente);

        // Verifica se o total de paradas permanentes alcançou o total de questões
        var totalQuestoes = $('.questao-container').length;
        if (contadorParadasPermanentemente >= totalQuestoes) {
            console.log("Todas as questões foram paradas permanentemente. Parando cronômetro principal.");
            pararCronometroPrincipal();
        }
    }
}

// Função para pausar o cronômetro
function pausarCronometroQuestao(idQuestao) {
    console.log("Pausando cronômetro para a questão:", idQuestao);
    if (cronometrosQuestoes[idQuestao] && cronometrosQuestoes[idQuestao].cronometro) {
        clearInterval(cronometrosQuestoes[idQuestao].cronometro);
        cronometrosQuestoes[idQuestao].cronometro = null;
        console.log("Cronômetro pausado para a questão:", idQuestao, "Tempo decorrido:", cronometrosQuestoes[idQuestao].tempoDecorrido);
    }
}

// Função para alternar questões
function alternarQuestao(idNovaQuestao) {
    var idQuestaoAtual = $('.questao-container:visible').attr('id');
    if (idQuestaoAtual) {
        idQuestaoAtual = idQuestaoAtual.split('-').pop();
    }

    console.log("Trocando da questão:", idQuestaoAtual, "para a questão:", idNovaQuestao);

    if (idQuestaoAtual !== idNovaQuestao) {
        pausarCronometroQuestao(idQuestaoAtual);
        $('.questao-container').hide();
        var questaoAlvo = $('#questao-container-' + idNovaQuestao);
        questaoAlvo.show();
        iniciarCronometroQuestao(idNovaQuestao);
    } else {
        console.log("A mesma questão selecionada, não alternando ou reiniciando o cronômetro.");
    }
}

// Função para calcular a taxa de acerto
function calcularTaxaDeAcerto(plataformaTentativas, tempoInicial) {
    var totalTentativas = 0;
    var tentativasCorretas = 0;
    var tempoInicialDate = new Date(tempoInicial);

    plataformaTentativas.forEach(function(detalhe) {
        var detalheData = new Date(detalhe.h);
        if (detalheData >= tempoInicialDate) {
            totalTentativas++;
            if (detalhe.r === 'c') {
                tentativasCorretas++;
            }
        }
    });

    if (totalTentativas === 0) {
        return "Sem registro";
    }

    var taxaDeAcerto = (tentativasCorretas / totalTentativas) * 100;
    return `${tentativasCorretas} de ${totalTentativas} (${taxaDeAcerto.toFixed(1)}%)`;
}

// Função para abrir e fechar a janela modal de informações
function exibirJanelaModalInformacoes() {
    var isOpen = $('#janela-modal-informacoes').is(':visible');
    if (!isOpen) {
        var conteudoDetalhes = '';
        var questaoAtualContainer = $('.questao-container:visible');
        var questaoAtualIndex = questaoAtualContainer.index() + 1;
        var totalQuestoes = $('.questao-container').length;
        var tempoInicialFormatado = getBrasiliaTimeFormatado(tempoInicial);
        var tempoDecorrido = $('#tempoDecorrido').text(); 
        var tempoIndividual = $('#tempoIndividual').text(); 
        var questaoId = questaoAtualContainer.attr('id').match(/\d+/)[0]; 
        var plataformaTentativas = JSON.parse(localStorage.getItem("plataformaTentativas") || "[]");
        var taxaDeAcerto = calcularTaxaDeAcerto(plataformaTentativas, tempoInicial);

        var conteudoDetalhes = 'Tempo inicial: <span id="tempoInicial">' + tempoInicialFormatado + '</span><br>' +
        'Tempo de lista: <span id="tempoDecorrido">' + tempoDecorrido + '</span><br>' +
        'Taxa de acerto: <span id="taxaDeAcerto">' + taxaDeAcerto + '</span><br><br>';

        // Filtrar as respostas anteriores ao tempo de início
        var tempoInicialDate = new Date(tempoInicial); 
        var respostaQuestao = plataformaTentativas.filter(detalhe => {
            var detalheData = new Date(detalhe.h); 
            return detalhe.id === questaoId && detalheData < tempoInicialDate;
        }).pop();

        var estadoResposta = 'Sem registro de resposta'; 
        var tempoResposta = 'Sem registro de data e hora'; 
        var horaResposta = 'Sem registro de duração'; 

        if (respostaQuestao) {
            estadoResposta = respostaQuestao.r === 'c' ? 'Respondida correta' : 'Respondida errada';
            tempoResposta = respostaQuestao.t ? respostaQuestao.t : 'Tempo não registrado'; 

            if (respostaQuestao.h) {
                var dataHora = new Date(respostaQuestao.h);
                horaResposta = getBrasiliaTimeFormatado(dataHora);
            } else {
                horaResposta = 'Hora não registrada';
            }
        }

        conteudoDetalhes += '⇾ Questão ' + questaoAtualIndex + ' de ' + totalQuestoes + '<br>';
        conteudoDetalhes += 'ﾠﾠ- Tempo de questão: <span id="tempoIndividual">' + tempoIndividual + '</span><br>';       

        conteudoDetalhes += 'ﾠﾠ- ' + questaoAtualContainer.attr('disciplina') + ', ' +
        questaoAtualContainer.attr('assunto') + ', ' +
        questaoAtualContainer.attr('banca') + ', ' +
        questaoAtualContainer.attr('ano') + ', ' +
        questaoAtualContainer.attr('modalidade') + ', ' +
        questaoAtualContainer.attr('forma') + '.<br>';

        conteudoDetalhes += '<br>⇾ Histórico da questão exibida: <br>';
        conteudoDetalhes += 'ﾠﾠ- ' + estadoResposta + '<br>';
        conteudoDetalhes += 'ﾠﾠ- ' + horaResposta + '<br>';
        conteudoDetalhes += 'ﾠﾠ- ' + tempoResposta + '<br><br>';

        conteudoDetalhes += 'Opções de filtro selecionadas:<br>';

        var disciplinasAgrupadas = {};
        $('.scrollable-section-disciplina').each(function() {
            var tituloDisciplina = $(this).find('.sticky-disciplina-title').text().trim();
            var assuntosSelecionados = $(this).find('.content-container-assunto input:checked').map(function() {
                var texto = $(this).closest('label').text().trim();
                return texto.includes('Deselecionar todas') ? null : texto;
            }).get().filter(function(texto) {
                return texto !== null;
            });

            if (assuntosSelecionados.length > 0) {
                disciplinasAgrupadas[tituloDisciplina] = assuntosSelecionados.join('; ');
            }
        });

        if (Object.keys(disciplinasAgrupadas).length > 0) {
            conteudoDetalhes += '⇾ Disciplinas:<br>';
            for (var disciplina in disciplinasAgrupadas) {
                conteudoDetalhes += 'ﾠﾠ- ' + disciplina + ': ' + disciplinasAgrupadas[disciplina] + '<br>';
            }
        } else {
            conteudoDetalhes += '⇾ Disciplinas: Nenhum<br>';
        }

        function tratarFiltrosSelecionados(selector, titulo) {
            var selecionados = [];
            $(selector).each(function() {
                selecionados.push($(this).closest('label').text().trim());
            });
            if (selecionados.length > 0) {
                conteudoDetalhes += `⇾ ${titulo}: ` + selecionados.join('; ') + '<br>';
            } else {
                conteudoDetalhes += `⇾ ${titulo}: Nenhum<br>`;
            }
        }

        tratarFiltrosSelecionados('input[name="ordenacao"]:checked', 'Ordenação');
        tratarFiltrosSelecionados('input[name="revisao-espacada"]:checked', 'Revisão Espaçada');
        tratarFiltrosSelecionados('input[name="filtro-banca[]"]:checked', 'Bancas');
        tratarFiltrosSelecionados('input[name="filtro-ano[]"]:checked', 'Anos');
        tratarFiltrosSelecionados('input[name="filtro-forma[]"]:checked', 'Formas');
        tratarFiltrosSelecionados('input[name="filtro-modalidade[]"]:checked', 'Modalidades');
        tratarFiltrosSelecionados('input[name="filtro-personalizado[]"]:checked', 'Personalizado');
        tratarFiltrosSelecionados('#filtro-correta:checked, #filtro-errada:checked, #filtro-nao-respondida:checked', 'Respostas');

        $('#janela-informacoes').html(conteudoDetalhes); 
        $('#tempoInicial').text(tempoInicialFormatado); 
        $('#janela-modal-informacoes').fadeIn(); 
        $('#janela-modal-overlay').fadeIn();
    } else {
        $('#janela-modal-informacoes').fadeOut();
        $('#janela-modal-overlay').fadeOut(); 
    }
}

function setCheckedValues(filterName, values) {
    if (values && values.length) {
            $("input[name='" + filterName + "']").prop("checked", false); // Desmarca todos os checkboxes
            values.forEach(function(value) {
                $("input[name='" + filterName + "'][value='" + value + "']").prop("checked", true);
            });
        }
    }

    function atualizarContagemQuestoes() {
    var totalQuestoes = $('.questao-container').length; // Conta o total de questões
    var questaoAtual = $('.questao-container:visible').index() + 1; // Encontra o índice da questão atual visível
    var textoContagem = questaoAtual + '° questão de ' + totalQuestoes; // Formata o texto
    $('#contagem-questoes').text(textoContagem); // Exibe o texto formatado
}

function carregarQuestoes() {
    if (botaoClicado) return;
    botaoClicado = true;

    var plataformaTentativas = JSON.parse(localStorage.getItem("plataformaTentativas") || "[]"),
    filtros = [],
    filtroPersonalizado = $("input[name='filtro-personalizado[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosAno = $("input[name='filtro-ano[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosDisciplina = $("input[name='filtro-disciplina[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosAssunto = $("input[name='filtro-assunto[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosBanca = $("input[name='filtro-banca[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosForma = $("input[name='filtro-forma[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosModalidade = $("input[name='filtro-modalidade[]']:checked").map(function() { return $(this).val(); }).get(),
    filtrosLocalStorage = JSON.parse(localStorage.getItem("plataformaFiltroPersonalizado") || "{}"),
    filtroEspacadoIds = JSON.parse(localStorage.getItem("plataformaRevisaoEspacada") || "[]"),
    plataformaRevisaoEspacada = $("input[name='revisao-espacada']:checked").length > 0;

    // Inicialização do indicador de carregamento
    $("#carregando-questoes").text("Carregando... 0%").show();

    // Processamento do filtro personalizado
    var filtroPersonalizado = $("input[name='filtro-personalizado[]']:checked").map(function() { return $(this).val(); }).get();
    var filtroPersonalizadoIds = [];
    if (filtroPersonalizado.length > 0) {
        filtros.push("personalizado");
        var filtrosLocalStorage = JSON.parse(localStorage.getItem("plataformaFiltroPersonalizado") || "{}");
        filtroPersonalizado.forEach(function(filtro) {
            if (filtrosLocalStorage[filtro]) {
                filtroPersonalizadoIds = filtroPersonalizadoIds.concat(filtrosLocalStorage[filtro]);
            }
        });
    }

    // Processamento do filtro de revisão espaçada
    var filtroEspacadoIds = JSON.parse(localStorage.getItem("plataformaRevisaoEspacada") || "[]");
    var plataformaRevisaoEspacada = $("input[name='revisao-espacada']:checked").length > 0;

    if (filtroEspacadoIds.length > 0 && plataformaRevisaoEspacada) {
        filtros.push("revisaoEspacada");
    } else if (plataformaRevisaoEspacada) {
    clearTimeout(debounceTimeout); // Limpa qualquer timeout anterior para garantir que não haja conflitos
    debounceTimeout = setTimeout(function() {
        $(".carregando-questoes").hide();
        $('#mensagem-erro').show();
        $("#botao-revisar").prop("disabled", false);
            botaoClicado = false; // Marca que o botão não está mais em estado de clique

        }, intervaloPermitido);
    return; // Encerra a execução da função aqui
}

    // Inicialização precoce do objeto 'data'
var data = {
    action: "plataforma_filtrar_questoes",
    filtros: filtros,
    filtroPersonalizadoIds: filtroPersonalizadoIds,
    filtroEspacadoIds: filtroEspacadoIds,
    plataformaTentativas: JSON.stringify(plataformaTentativas),
    ordenacao: $("input[name='ordenacao']:checked").val()
};

    // Verifica filtros de resposta
if ($("#filtro-correta").is(":checked")) {
    filtros.push("correta");
}
if ($("#filtro-errada").is(":checked")) {
    filtros.push("errada");
}
if ($("#filtro-nao-respondida").is(":checked")) {
    filtros.push("naoRespondidas");
}

    // Adiciona demais filtros à data
["Disciplina", "Assunto", "Banca", "Forma", "Modalidade", "Ano"].forEach(function(item) {
    data["filtro" + item] = $("input[name='filtro-" + item.toLowerCase() + "[]']:checked").map(function() { return $(this).val(); }).get();
});

    // Se todos os filtros estiverem vazios, aplica o filtro do ano mais recente disponível
if ([...filtros, ...filtroPersonalizado, ...filtrosAno, ...filtrosDisciplina, ...filtrosAssunto, ...filtrosBanca, ...filtrosForma, ...filtrosModalidade].every(arr => arr.length === 0)) {
    var anosDisponiveis = $("input[name='filtro-ano[]']").map(function() { return $(this).val(); }).get();
    var anoMaisRecente = Math.max.apply(null, anosDisponiveis);
    data["filtroAno"] = [anoMaisRecente.toString()];
        data["filtroBanca"] = ["Enem (1ª Aplicação)"]; // Define a banca "Enem" como filtro automaticamente
        data["filtroDisciplina"] = ["Filosofia", "Sociologia", "História", "Geografia", "Literatura", "Língua Portuguesa", "Língua Inglesa"]; // Disciplinas específicas
    }

    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(function() {
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: data,
            xhr: function() {
                var xhr = new window.XMLHttpRequest();
                xhr.onprogress = function(evt) {
                    if (evt.lengthComputable) {
                        var percentComplete = Math.round((evt.loaded / evt.total) * 100);
                        $("#carregando-questoes").text("Carregando... " + percentComplete + "%");
                    }
                };
                return xhr;
            },
            success: function(response) {
                // Processa a resposta e insere no container de questões
                $("#revisao-container").html(response);
                $("#carregando-questoes").text("Carregando... 100%").hide();

                var totalQuestoes = $('.questao-container').length;
                if (totalQuestoes > 0) {
                    $('.botoes-fora-filtro-container').hide();
                    var idPrimeiraQuestaoElement = $('.questao-container:visible').attr('id');

                    iniciarMathJax();

                    if (idPrimeiraQuestaoElement) {
                        var idPrimeiraQuestao = idPrimeiraQuestaoElement.split('-').pop();
                        
                        iniciarCronometro();
                        contarQuestoesCronometro();
                        iniciarCronometroQuestao(idPrimeiraQuestao);
                    }
                    $("#revisao-container").show(); // Exibe o conteúdo após tudo estar pronto
                } else {
                    console.log('Nenhuma questão visível.');
                    $(".carregando-questoes").hide();
                    $('#mensagem-erro').show();
                }

                // Resetar botão e contadores após processamento
                setTimeout(function() {
                    botaoClicado = false;
                    $("#botao-revisar").prop("disabled", false);
                    atualizarContagemQuestoes();
                }, intervaloPermitido);
            },
            error: function(xhr, status, error) {
                console.error("Erro ao carregar questões: " + error);
                $('#mensagem-erro').text('Erro ao carregar questões.').show();
                $("#carregando-questoes").hide(); // Esconde o indicador de carregamento em caso de falha
            }
        });
    }, intervaloPermitido);

    tentativasRevisar++;
    if (tentativasRevisar >= limiteTentativas) location.reload();
}

function atualizarVisibilidadeQuestoes() {
    $('.questao-container').hide();
    $('.questao-container').first().show();
}

// Função para navegar entre questões
function navegarQuestao(direcao, questaoAtual) {
    questaoAtual.hide();
    if (direcao === 'anterior') {
        questaoAtual.prev('.questao').show();
    } else if (direcao === 'proxima') {
        questaoAtual.next('.questao').show();
    }
}

// Navegação entre questões com manipulação de cronômetro
$(document).on('click', '.botao-proxima, .botao-anterior', function() {
    var questaoAtual = $(this).closest('.questao-container');
    var direcao = $(this).hasClass('botao-proxima') ? 'next' : 'prev';
    var questaoAlvo = questaoAtual[direcao]('.questao-container');

    if (questaoAlvo.length) {
        var idQuestaoAtual = questaoAtual.attr('id').split('-').pop();
        var idNovaQuestao = questaoAlvo.attr('id').split('-').pop();

        console.log("Trocando da questão:", idQuestaoAtual, "para a questão:", idNovaQuestao);

        // Pausa o cronômetro da questão atual antes de escondê-la
        pausarCronometroQuestao(idQuestaoAtual);
        questaoAtual.hide();

        // Mostra a nova questão e inicia o cronômetro para ela
        questaoAlvo.show();
        iniciarCronometroQuestao(idNovaQuestao);

        // Move a tela para o topo
        window.scrollTo(0, 0);

        // Atualiza os botões e contadores após a mudança
        atualizarContagemQuestoes();
    } else {
        console.log("Nenhuma nova questão encontrada na direção:", direcao);
    }
});

// Ao iniciar uma ação que requer espera
$('#botao-revisar').click(function() {
    $('#mensagem-erro').hide(); 
    $('#carregando-questoes').show(); 

    iniciarCronometro();
    contarQuestoesCronometro();
});

function toggleVisibility() {
    if ($('#carregando-questoes').is(':visible')) {
        $('#carregando-questoes').hide();
        $('#mensagem-erro').show();
    } else {
        $('#mensagem-erro').hide();
        $('#carregando-questoes').show();
    }
}

// Quando a requisição AJ@X falha ou completa
function onAjaxComplete() {
    $('#carregando-questoes').hide();
    $('#mensagem-erro').show();
    verificarVisibilidadeInstagramFollow();
}

function exibirItensPersonalizados(questaoId) {
    var filtros = JSON.parse(localStorage.getItem('plataformaFiltroPersonalizado') || '{}');
    var filtrosAplicados = [];

    for (var filtro in filtros) {
        if (filtros[filtro].includes(questaoId)) {
            filtrosAplicados.push(filtro);
        }
    }

    var listaFiltros = filtrosAplicados.map(function(filtro) {
        return `<li>
        ${filtro}&nbsp;
        <button class="botao-excluir-item-container-personalizado" data-filtro="${filtro}">excluir</button>
        </li>`;
    }).join('');

    $('#lista-itens-personalzados').html(listaFiltros);
}

function getBrasiliaTime() {
    var now = new Date(); // Data e hora atual do usuário
    var utc = now.getTime() + now.getTimezoneOffset() * 60000; // Convertendo para UTC
    var brasiliaTime = new Date(utc - (3*60*60*1000)); // Subtraindo 3 horas para obter o horário de Brasília

    var year = brasiliaTime.getFullYear();
    var month = ('0' + (brasiliaTime.getMonth() + 1)).slice(-2); // Adiciona um zero à esquerda se necessário
    var day = ('0' + brasiliaTime.getDate()).slice(-2);
    var hours = ('0' + brasiliaTime.getHours()).slice(-2);
    var minutes = ('0' + brasiliaTime.getMinutes()).slice(-2);
    var seconds = ('0' + brasiliaTime.getSeconds()).slice(-2);

    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

function highlightText(range) {
    let span = document.createElement('span');
    span.className = 'texto-destacado';
    try {
        range.surroundContents(span);
    } catch (error) {
        //console.error("Erro ao aplicar o destaque: ", error);
    }
}

function removeHighlights() {
    $('#revisao-container .texto-destacado').each(function() {
        var parent = this.parentNode;
        while (this.firstChild) {
                parent.insertBefore(this.firstChild, this); // Move todos os filhos do span para fora antes de remover o span
            }
            parent.removeChild(this); // Remove o span
        });
}

function riscarAlternativa(button) {
    var container = button.parentNode;
    var questaoContainer = container.closest('.questao-container');

    // Verifica se a questão já foi respondida e sai se verdadeiro
    if (questaoContainer.getAttribute('data-respondida') === 'true') {
        return;
    }

    var input = container.querySelector('.input-alternativa');
    var prefixoAlternativa = container.querySelector('.prefixo-alternativa');
    var conteudoAlternativa = container.querySelector('.conteudo-alternativa');
    var images = container.querySelectorAll('img'); // Seleciona todas as imagens dentro do label

    input.disabled = !input.disabled;
    if (input.disabled) {
        prefixoAlternativa.classList.add('prefixo-alternativa-riscada');
        conteudoAlternativa.classList.add('conteudo-alternativa-riscada');
        images.forEach(img => img.classList.add('image-opacity')); // Aplica redução de opacidade
        input.checked = false;
        input.classList.add('desabilitado-por-tesoura'); // Adiciona a classe para estilização específica
        button.innerHTML = '<span class="emoji-costura">🪡</span>'; // Muda para o emoji de costura
    } else {
        prefixoAlternativa.classList.remove('prefixo-alternativa-riscada');
        conteudoAlternativa.classList.remove('conteudo-alternativa-riscada');
        images.forEach(img => img.classList.remove('image-opacity')); // Remove a redução de opacidade
        input.classList.remove('desabilitado-por-tesoura'); // Remove a classe
        button.innerHTML = '<span class="emoji-tesoura">✂️</span>'; // Muda de volta para o emoji de tesoura
    }
}


// Atualiza divisores inicialmente e em cada mudança relevante
function atualizarDivisores() {
    $('.questao-informacao').each(function() {
        let visible = false;
        $(this).children().each(function() {
            if ($(this).is(':visible') && visible) {
                $(this).prev('.divisor').show();
            } else {
                $(this).prev('.divisor').hide();
            }
            visible = $(this).is(':visible') && !$(this).hasClass('divisor');
        });
    });
}

function atualizarDivisores() {
    $('.divisor').each(function() {
        var nextType = $(this).data('next-type');
        var nextElement = $('[data-tipo="' + nextType + '"]');
        if (nextElement.is(':visible')) {
            $(this).show();
        } else {
            $(this).hide();
        }
    });
}

function atualizarEstatisticasGerais() {
    var elemento = document.getElementById('idDoElemento'); 
    if (elemento) {
        var valor = elemento.value;
        // Restante do código que usa 'valor'
    } else {
        console.error('Elemento não encontrado');
    }
}

function updateLabel(checkbox) {
    if (checkbox.checked) {
        checkbox.nextSibling.textContent = '⏬ Deselecionar todas';
    } else {
        checkbox.nextSibling.textContent = '⏬ Selecionar todas';
    }
}

function checkSelectAllCheckbox(container) {
    const allCheckboxes = container.querySelectorAll('input[type="checkbox"]:not([data-selecionar-todas="true"])');
    const allChecked = Array.from(allCheckboxes).every(checkbox => checkbox.checked);
    const selectAllCheckbox = container.querySelector('input[type="checkbox"][data-selecionar-todas="true"]');

    if (selectAllCheckbox) {
        selectAllCheckbox.checked = allChecked;
        updateLabel(selectAllCheckbox);
    }
}

$('.janela-modal').hide();

///////////////////////////////////////////////////////////////////////////

$(document).ready(function() {
    carregarFiltrosSalvos(); 
    atualizarDivisores();  
    verificarVisibilidadeInstagramFollow();
    atualizarVisibilidadeQuestoes();
    obterEstadoCheckboxesPersonalizado()
    verificarEAtualizarSelecionarTodas();
    aplicarRegrasRevisaoEspacada();

    // Evento para abrir a janela modal ao clicar no botão de informações
    $(document).on('click', '#botao-informacao', function() {
        $('#modal-overlay').fadeIn();
        exibirJanelaModalInformacoes();
    });

    // Seleciona todas as caixas de seleção de "Selecionar Todas"
    const selecaoTotalCheckboxes = document.querySelectorAll('input[type="checkbox"][data-selecionar-todas="true"]');

    selecaoTotalCheckboxes.forEach(function(checkboxTodos) {
        checkboxTodos.addEventListener('change', function() {
            var container = checkboxTodos.closest('.content-container, .content-container-assunto');
            const allCheckboxes = container.querySelectorAll('input[type="checkbox"]:not([data-selecionar-todas="true"])');

            allCheckboxes.forEach(function(checkbox) {
                checkbox.checked = checkboxTodos.checked;
            });

            updateLabel(checkboxTodos);
        });
    });

    document.querySelectorAll('.content-container, .content-container-assunto').forEach(container => {
        container.addEventListener('change', function(e) {
            if (e.target.type === 'checkbox' && !e.target.dataset.selecionarTodas) {
                checkSelectAllCheckbox(container);
            }
        });
    });

    // Verificação inicial para configurar o estado das checkboxes "Selecionar todas" quando a página carrega
    document.querySelectorAll('.content-container, .content-container-assunto').forEach(checkSelectAllCheckbox);

    // Exibir ou ocultar a janela de adicionar filtro
    $(document).on('click', '.botao-personalizado', function() {
        var questaoAtual = $('.questao-container:visible');
        var questaoId = questaoAtual.attr('id').split('-').pop();

        $('#modal-overlay').fadeIn();
        exibirJanelaModalPersonalizado(questaoId);
    });

    // Adicionar novo filtro
    $(document).on('click', '#botao-adicionar-personalizado', function() {
        var filtroValor = $('#input-rotulo-personalizado').val();
        if (filtroValor === '') {
            return;
        }

        // Obtendo a ID da questão atual
        var questaoAtual = $('.questao-container:visible');
        var questaoId = questaoAtual.attr('id').split('-').pop();

        // Armazenar no localStorage
        var filtros = JSON.parse(localStorage.getItem('plataformaFiltroPersonalizado') || '{}');

        if (!filtros[filtroValor]) {
            filtros[filtroValor] = [];
        }
        if (!filtros[filtroValor].includes(questaoId)) {
            filtros[filtroValor].push(questaoId);
        }

        localStorage.setItem('plataformaFiltroPersonalizado', JSON.stringify(filtros));

        // Atualizar a lista de filtros aplicados e exibi-la
        exibirItensPersonalizados(questaoId);

        // Fechar a janela de filtro e limpar o input
        $('#janela-modal-personalizado').removeClass('open');
        $('#input-rotulo-personalizado').val('');
    });

    $(document).on('click', '.botao-excluir-item-container-personalizado', function(e) {
        e.preventDefault();
        var botaoExcluir = $(this);
        var filtro = botaoExcluir.data('filtro');
        var elemento = botaoExcluir.parent();

    // Fecha todas as confirmações abertas e restaura o nome do filtro
        $('.excluir-item-container').each(function() {
            var filtroAtual = $(this).find('.confirmar-excluir-item-container-personalizado').data('filtro');
            $(this).parent().html(`
                <span>${filtroAtual}</span> 
                <button class="botao-excluir-item-container-personalizado" data-filtro="${filtroAtual}">excluir</button>
                `);
        });

    // Adiciona a mensagem de confirmação apenas para o item selecionado
        elemento.html(`
            <div class="excluir-item-container">
            <span>${filtro}</span>
            <div>
            ⮑Você quer excluir o item acima?⚠️
            <div>
            <button class="confirmar-excluir-item-container-personalizado" data-filtro="${filtro}">SIM</button>
            <button class="cancelar-excluir-item-container-personalizado" data-filtro="${filtro}">NÃO</button>
            </div>
            </div>
            </div>
            `);
    });

// Manipulador de eventos para o botão 'Sim'
    $(document).on('click', '.confirmar-excluir-item-container-personalizado', function() {
        var filtroValor = $(this).data('filtro');
        var questaoAtual = $('.questao-container:visible');
        var questaoId = questaoAtual.attr('id').split('-').pop();

        var filtros = JSON.parse(localStorage.getItem('plataformaFiltroPersonalizado') || '{}');

        if (filtros[filtroValor]) {
            var index = filtros[filtroValor].indexOf(questaoId);
            if (index > -1) {
                filtros[filtroValor].splice(index, 1);
            }

            if (filtros[filtroValor].length === 0) {
                delete filtros[filtroValor];
            }

            localStorage.setItem('plataformaFiltroPersonalizado', JSON.stringify(filtros));
            exibirItensPersonalizados(questaoId);
        }

    });

// Manipulador de eventos para o botão 'Não'
    $(document).on('click', '.cancelar-excluir-item-container-personalizado', function() {
        var questaoAtual = $('.questao-container:visible');
        var questaoId = questaoAtual.attr('id').split('-').pop();
        exibirItensPersonalizados(questaoId);
    });

// Previne a propagação do clique dos botões dentro do item da lista
    $(document).on('click', '.botao-excluir-item-container-personalizado, .confirmar-excluir-item-container-personalizado, .cancelar-excluir-item-container-personalizado', function(e) {
    e.stopPropagation(); // Impede que o evento de clique se propague para o item da lista
});




    $(document).keydown(function(e) {
        if (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey) {
        return; // Ignora teclas modificadoras
    }

    if ($('#janela-modal-personalizado').is(':visible') || $('#janela-modal-salvar-filtros-selecionados').is(':visible')) {
        if (e.key === "Enter") {
            $('#janela-modal-personalizado:visible #botao-adicionar-personalizado').click();
            $('#janela-modal-salvar-filtros-selecionados:visible #botao-adicionar-salvar-filtros-selecionados').click();
            e.preventDefault(); // Impede ação padrão do Enter
        }
        return; // Interrompe a execução para outros handlers
    }

    if (e.key === "d") {
        e.preventDefault();
        $('.questao-container:visible .botao-proxima').click();
        $('#fechar-janela-modal').click();
    } else if (e.key === "a") {
        e.preventDefault();
        $('.questao-container:visible .botao-anterior').click();
        $('#fechar-janela-modal').click();
    } else if (e.key.toLowerCase() === "f") {
        e.preventDefault();
        if ($('#janela-modal-informacoes').is(':visible')) {
            $('#fechar-janela-modal').click();
        } else {
            $('#botao-informacao').click();
        }
    } else if (e.key === "w") {
        e.preventDefault();
        var inputs = $('.questao-container:visible .input-alternativa');
        var currentIndex = inputs.index(inputs.filter(':checked'));
        var previousInput = inputs.eq(currentIndex - 1).length ? inputs.eq(currentIndex - 1) : inputs.last();
        previousInput.prop('checked', true).trigger('change');
    } else if (e.key === "s") {
        e.preventDefault();
        var inputs = $('.questao-container:visible .input-alternativa');
        var currentIndex = inputs.index(inputs.filter(':checked'));
        var nextInput = inputs.eq(currentIndex + 1).length ? inputs.eq(currentIndex + 1) : inputs.first();
        nextInput.prop('checked', true).trigger('change');
    } else if (e.key === " ") {
        e.preventDefault(); // Impede a rolagem da página ao pressionar espaço
        var inputs = $('.questao-container:visible .input-alternativa');
        var currentIndex = inputs.index(inputs.filter(':checked'));
        var nextInput = inputs.eq(currentIndex + 1).length ? inputs.eq(currentIndex + 1) : inputs.first();
        nextInput.prop('checked', true).trigger('change');
    } else if (e.key === "q") {
        e.preventDefault(); // Impede outras ações da tecla "c"
        var selectedInput = $('.questao-container:visible .input-alternativa:checked');
        selectedInput.closest('label').prev('.btn-riscar').click();
    } else if (e.key === "e") {
        e.preventDefault(); // Impede a ação padrão do Enter
        $('.questao-container:visible .botao-responder').click(); // Aciona o botão de responder
    }
});





    $(document).on('click', '.botao-responder', function() {
        var questaoContainer = $(this).closest('.questao-container');
        questaoContainer.attr('data-respondida', 'true');
        var forma = questaoContainer.attr('forma');

    // Remove o riscado e a cor cinza das alternativas e restaura a opacidade das imagens
        questaoContainer.find('.prefixo-alternativa-riscada').removeClass('prefixo-alternativa-riscada');
        questaoContainer.find('.conteudo-alternativa-riscada').removeClass('conteudo-alternativa-riscada');
    questaoContainer.find('.input-alternativa').prop('disabled', false); // Reabilita as alternativas
    questaoContainer.find('img').removeClass('image-opacity'); // Remove a opacidade das imagens

    // Restaura o estado original dos inputs e remove classes adicionais
    questaoContainer.find('.input-alternativa').each(function() {
        $(this).removeClass('desabilitado-por-tesoura'); // Remove a classe que indica desabilitação pelo botão da tesoura
    });




    var questaoId = questaoContainer.attr('id').split('-').pop();
    var respostasCorretas = questaoContainer.find('.respostas-corretas').text().trim().split('\n').map(function(item) {
        return item.substring(item.indexOf('] ') + 2).trim(); // Ignora o marcador da alternativa, ex: "[B] "
    });

    var alternativas = questaoContainer.find('input[type="radio"], input[type="checkbox"]');
    var alternativasSelecionadas = alternativas.filter(':checked');
    var respostasUsuario = [];
    alternativasSelecionadas.each(function() {
        var labelTexto = $(this).closest('label').text().trim();
            // Extração e limpeza da resposta do usuário
        var resposta = labelTexto.substring(labelTexto.indexOf('] ') + 2).trim();
        respostasUsuario.push(resposta);
    });

    var ano = questaoContainer.attr('ano')
    var assunto = questaoContainer.attr('assunto')
    var banca = questaoContainer.attr('banca')
    var disciplina = questaoContainer.attr('disciplina')
    var forma = questaoContainer.attr('forma')
    var modalidade = questaoContainer.attr('modalidade')
    var tempoDecorrido = cronometrosQuestoes[questaoId].tempoDecorrido;
    var tempoFormatado = formatarTempoDecorridoFormulario(tempoDecorrido);
    var respostaCorreta = respostasCorretas.every(r => respostasUsuario.includes(r)) && respostasUsuario.every(r => respostasCorretas.includes(r));
    var respostaUsuario = respostaCorreta ? 'c' : 'e';
    var dataHora = getBrasiliaTime();

    var detalhesTentativa = {
        id: questaoId,
        h: dataHora,
        t: tempoFormatado,
        r: respostaUsuario,
    };


    obterLocalizacaoEEnviarDados(detalhesTentativa);

    if (forma === "Resposta discursiva") {
        detalhesTentativa.f = forma;
    }

    var tentativas = JSON.parse(localStorage.getItem("plataformaTentativas") || "[]");
    tentativas.push(detalhesTentativa);
    localStorage.setItem("plataformaTentativas", JSON.stringify(tentativas));

        // Verifica se a questão é de resposta discursiva e remove do localStorage
    if (forma === "Resposta discursiva") {
        var tentativasAtualizadas = tentativas.filter(function(tentativa) {
            return tentativa.id !== questaoId || tentativa.f !== "Resposta discursiva";
        });
        localStorage.setItem("plataformaTentativas", JSON.stringify(tentativasAtualizadas));
    }

    // Coloração das respostas e alertas
    alternativas.each(function() {
        var labelTexto = $(this).closest('label').text().trim();
        var resposta = labelTexto.substring(labelTexto.indexOf('] ') + 2).trim();
    $(this).closest('label').removeClass('label-correct-checked label-incorrect-checked label-correct-unchecked'); // Limpa classes anteriores para evitar sobreposições

    if (respostasCorretas.includes(resposta) && $(this).is(':checked')) {
        $(this).closest('label').addClass('label-correct-checked');
    } else if (!respostasCorretas.includes(resposta) && $(this).is(':checked')) {
        $(this).closest('label').addClass('label-incorrect-checked');
    } else if (respostasCorretas.includes(resposta) && !$(this).is(':checked')) {
        $(this).closest('label').addClass('label-correct-unchecked');
    }
});

    questaoContainer.find('input[type="radio"], input[type="checkbox"]').prop('disabled', true);

        // Desmarca todos os checkboxes e radiobuttons
    questaoContainer.find('.input-alternativa').prop('checked', false);

        // Adiciona o botão "Mostrar Explicação" após a resposta ser submetida
    var botaoExplicacao = $('<button>', {
        text: '🧠',
        class: 'botao-explicacao'
    });

    $(this).replaceWith(botaoExplicacao);

    pararCronometroPermanentementeQuestao(questaoId);
});

$(document).on('click', '.botao-explicacao', function() {
    var questaoAtual = $(this).closest('.questao-container');
    var explicacao = questaoAtual.find('.explicacao');

    // Alterna a visibilidade da explicação
    explicacao.toggle();


    // Alterna o texto do botão
    var textoBotao = explicacao.is(':visible') ? '🤏🏾' : '🧠';
    $(this).text(textoBotao);

});

$("#botao-revisar").click(function() {
    $(".carregando-questoes").show();  // Exibe a mensagem de preparo
    $(this).prop("disabled", true);    // Desabilita o botão para evitar múltiplas requisições
    carregarQuestoes();                // Chama a função que carrega as questões
    verificarVisibilidadeInstagramFollow();
});

$('#revisao-container').on('mouseup', function(e) {
    let selection = window.getSelection();
        // Verifica se a seleção está dentro do container especificado
    if (selection.rangeCount > 0 && $(selection.anchorNode.parentNode).closest('#revisao-container').length) {
        highlightText(selection.getRangeAt(0));
            window.getSelection().removeAllRanges(); // Limpa a seleção após destacar
        }
    });

$('#revisao-container').on('dblclick', function(e) {
    removeHighlights();
});

$(document).on('click', '.btn-riscar', function() {
    riscarAlternativa(this);
});

// Monitorar mudanças que podem afetar a visibilidade
$(window).resize(atualizarDivisores);
$('.filtro-container input').change(atualizarDivisores);

// Atualiza após mudanças nos filtros
$('.filtro-container input').on('change', function() {
    atualizarDivisores();
});

jQuery(document).ready(function($) {
    function atualizarIconeBotao() {
        var temaAtual = localStorage.getItem('plataformaTheme');
        if (temaAtual === 'plataformaDark') {
            $('#botao-dark-mode').text('🌈'); // Ícone para o modo escuro
            $('html').addClass('dark-mode');
        } else {
            $('#botao-dark-mode').text('🦉'); // Ícone para o modo claro
            $('html').removeClass('dark-mode');
        }
    }

    $('#botao-dark-mode').click(function() {
        $('html').toggleClass('dark-mode');
        var novoTema = $('html').hasClass('dark-mode') ? 'plataformaDark' : 'plataformaLight';
        localStorage.setItem('plataformaTheme', novoTema);
        atualizarIconeBotao(); // Atualiza o ícone cada vez que o botão é clicado
    });

    // Verifica a preferência salva quando a página carrega
    atualizarIconeBotao();
});


// Atualiza quando a janela é redimensionada
$(window).resize(function() {
    atualizarDivisores();
});

function obterLocalizacaoEEnviarDados(detalhesTentativa) {
    let localizacaoCache = sessionStorage.getItem('localizacaoUsuario');
    if (localizacaoCache) {
        localizacaoCache = JSON.parse(localizacaoCache);
        enviarTentativaAoServidor(detalhesTentativa, localizacaoCache);
    } else {
        $.getJSON('https://ipinfo.io?token=339e5b940cb6e3', function(data) {
            let localizacao = {
                cidade: data.city,
                regiao: data.region
            };
            sessionStorage.setItem('localizacaoUsuario', JSON.stringify(localizacao));  // Armazena no cache
            enviarTentativaAoServidor(detalhesTentativa, localizacao);
        }).fail(function() {
            console.error('Erro ao obter localização por IP.');
            enviarTentativaAoServidor(detalhesTentativa);  // Envio sem localização em caso de falha
        });
    }
}

function enviarTentativaAoServidor(detalhesTentativa, localizacao = {}) {
    console.log('Enviando tentativa com tempo decorrido: ', detalhesTentativa.t, 'Cidade:', localizacao.cidade, 'Região:', localizacao.regiao);

    $.ajax({
        url: ajaxurl,
        type: 'POST',
        data: {
            action: 'plataforma_salvar_resposta',
            usuario: "Indisponível",
            questao_id: detalhesTentativa.id,
            h: detalhesTentativa.h,
            t: detalhesTentativa.t,
            r: detalhesTentativa.r,
            cidade: localizacao.cidade || "Indisponível",
            regiao: localizacao.regiao || "Indisponível"
        },
        success: function(response) {
            console.log('Dados enviados com sucesso:', response.data);
        },
        error: function(xhr, status, error) {
            console.error('Erro ao enviar dados:', error);
        }
    });
}

});
}
});

//
